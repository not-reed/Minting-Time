import type { Deployer, DeployFunction } from "@repo/web3/cli";
import type { Settings } from "../alephium.config";
import {
	stringToHex,
	ZERO_ADDRESS,
	type DeployContractResult,
	type ContractInstance,
} from "@alephium/web3";
import {
	NFT,
	NFTCollection,
	SetControllerByteVec,
	SetControllerU256,
	SetCoordinatorByteVec,
	SetCoordinatorU256,
	TimeZoneController,
	TimeZoneCoordinatorByteVec,
	TimeZoneCoordinatorU256,
	TimeZoneSpliceByteVec,
	TimeZoneSpliceU256,
	SetCollection,
} from "../artifacts/ts";

const zones = [
	"Africa/Abidjan",
	"Africa/Accra",
	"Africa/Addis_Ababa",
	"Africa/Algiers",
	"Africa/Asmara",
	"Africa/Bamako",
	"Africa/Bangui",
	"Africa/Banjul",
	"Africa/Bissau",
	"Africa/Blantyre",
	"Africa/Brazzaville",
	"Africa/Bujumbura",
	"Africa/Casablanca",
	"Africa/Ceuta",
	"Africa/Conakry",
	"Africa/Dakar",
	"Africa/Dar_es_Salaam",
	"Africa/Djibouti",
	"Africa/Douala",
	"Africa/El_Aaiun",
	"Africa/Freetown",
	"Africa/Gaborone",
	"Africa/Harare",
	"Africa/Johannesburg",
	"Africa/Juba",
	"Africa/Kampala",
	"Africa/Khartoum",
	"Africa/Kigali",
	"Africa/Kinshasa",
	"Africa/Lagos",
	"Africa/Libreville",
	"Africa/Lome",
	"Africa/Luanda",
	"Africa/Lubumbashi",
	"Africa/Lusaka",
	"Africa/Malabo",
	"Africa/Maputo",
	"Africa/Maseru",
	"Africa/Mbabane",
	"Africa/Mogadishu",
	"Africa/Monrovia",
	"Africa/Nairobi",
	"Africa/Ndjamena",
	"Africa/Niamey",
	"Africa/Nouakchott",
	"Africa/Ouagadougou",
	"Africa/Porto-Novo",
	"Africa/Sao_Tome",
	"Africa/Tunis",
	"Africa/Windhoek",
	"America/Adak",
	"America/Anchorage",
	"America/Anguilla",
	"America/Antigua",
	"America/Araguaina",
	"America/Argentina/Buenos_Aires",
	"America/Argentina/Catamarca",
	"America/Argentina/Cordoba",
	"America/Argentina/Jujuy",
	"America/Argentina/La_Rioja",
	"America/Argentina/Mendoza",
	"America/Argentina/Rio_Gallegos",
	"America/Argentina/Salta",
	"America/Argentina/San_Juan",
	"America/Argentina/San_Luis",
	"America/Argentina/Tucuman",
	"America/Argentina/Ushuaia",
	"America/Aruba",
	"America/Asuncion",
	"America/Atikokan",
	"America/Bahia",
	"America/Bahia_Banderas",
	"America/Barbados",
	"America/Belem",
	"America/Belize",
	"America/Blanc-Sablon",
	"America/Boa_Vista",
	"America/Bogota",
	"America/Campo_Grande",
	"America/Cancun",
	"America/Caracas",
	"America/Cayenne",
	"America/Cayman",
	"America/Chicago",
	"America/Chihuahua",
	"America/Costa_Rica",
	"America/Cuiaba",
	"America/Curacao",
	"America/Danmarkshavn",
	"America/Detroit",
	"America/Dominica",
	"America/Eirunepe",
	"America/El_Salvador",
	"America/Fortaleza",
	"America/Glace_Bay",
	"America/Goose_Bay",
	"America/Grand_Turk",
	"America/Grenada",
	"America/Guadeloupe",
	"America/Guatemala",
	"America/Guayaquil",
	"America/Guyana",
	"America/Halifax",
	"America/Havana",
	"America/Indiana/Indianapolis",
	"America/Indiana/Knox",
	"America/Indiana/Marengo",
	"America/Indiana/Petersburg",
	"America/Indiana/Tell_City",
	"America/Indiana/Vevay",
	"America/Indiana/Vincennes",
	"America/Indiana/Winamac",
	"America/Iqaluit",
	"America/Jamaica",
	"America/Juneau",
	"America/Kentucky/Louisville",
	"America/Kentucky/Monticello",
	"America/Kralendijk",
	"America/La_Paz",
	"America/Lima",
	"America/Los_Angeles",
	"America/Lower_Princes",
	"America/Maceio",
	"America/Managua",
	"America/Manaus",
	"America/Marigot",
	"America/Martinique",
	"America/Matamoros",
	"America/Menominee",
	"America/Merida",
	"America/Metlakatla",
	"America/Mexico_City",
	"America/Miquelon",
	"America/Moncton",
	"America/Monterrey",
	"America/Montevideo",
	"America/Montserrat",
	"America/Nassau",
	"America/New_York",
	"America/Nome",
	"America/Noronha",
	"America/North_Dakota/Beulah",
	"America/North_Dakota/Center",
	"America/North_Dakota/New_Salem",
	"America/Nuuk",
	"America/Ojinaga",
	"America/Panama",
	"America/Paramaribo",
	"America/Port_of_Spain",
	"America/Port-au-Prince",
	"America/Porto_Velho",
	"America/Puerto_Rico",
	"America/Punta_Arenas",
	"America/Rankin_Inlet",
	"America/Recife",
	"America/Regina",
	"America/Resolute",
	"America/Rio_Branco",
	"America/Santarem",
	"America/Santiago",
	"America/Santo_Domingo",
	"America/Sao_Paulo",
	"America/Scoresbysund",
	"America/Sitka",
	"America/St_Barthelemy",
	"America/St_Johns",
	"America/St_Kitts",
	"America/St_Lucia",
	"America/St_Thomas",
	"America/St_Vincent",
	"America/Swift_Current",
	"America/Tegucigalpa",
	"America/Thule",
	"America/Tijuana",
	"America/Toronto",
	"America/Tortola",
	"America/Vancouver",
	"America/Winnipeg",
	"America/Yakutat",
	"Antarctica/Casey",
	"Antarctica/Davis",
	"Antarctica/DumontDUrville",
	"Antarctica/Macquarie",
	"Antarctica/Mawson",
	"Antarctica/McMurdo",
	"Antarctica/Palmer",
	"Antarctica/Rothera",
	"Antarctica/Syowa",
	"Antarctica/Troll",
	"Antarctica/Vostok",
	"Arctic/Longyearbyen",
	"Asia/Aden",
	"Asia/Almaty",
	"Asia/Anadyr",
	"Asia/Aqtau",
	"Asia/Aqtobe",
	"Asia/Atyrau",
	"Asia/Baghdad",
	"Asia/Bahrain",
	"Asia/Baku",
	"Asia/Bangkok",
	"Asia/Barnaul",
	"Asia/Bishkek",
	"Asia/Brunei",
	"Asia/Chita",
	"Asia/Choibalsan",
	"Asia/Colombo",
	"Asia/Dhaka",
	"Asia/Dili",
	"Asia/Dushanbe",
	"Asia/Ho_Chi_Minh",
	"Asia/Hong_Kong",
	"Asia/Hovd",
	"Asia/Irkutsk",
	"Asia/Jakarta",
	"Asia/Jayapura",
	"Asia/Jerusalem",
	"Asia/Kabul",
	"Asia/Kamchatka",
	"Asia/Karachi",
	"Asia/Kathmandu",
	"Asia/Khandyga",
	"Asia/Kolkata",
	"Asia/Krasnoyarsk",
	"Asia/Kuala_Lumpur",
	"Asia/Kuching",
	"Asia/Kuwait",
	"Asia/Macau",
	"Asia/Magadan",
	"Asia/Makassar",
	"Asia/Manila",
	"Asia/Novokuznetsk",
	"Asia/Novosibirsk",
	"Asia/Omsk",
	"Asia/Oral",
	"Asia/Phnom_Penh",
	"Asia/Pontianak",
	"Asia/Pyongyang",
	"Asia/Qatar",
	"Asia/Qostanay",
	"Asia/Qyzylorda",
	"Asia/Riyadh",
	"Asia/Sakhalin",
	"Asia/Samarkand",
	"Asia/Seoul",
	"Asia/Shanghai",
	"Asia/Singapore",
	"Asia/Srednekolymsk",
	"Asia/Taipei",
	"Asia/Tashkent",
	"Asia/Tbilisi",
	"Asia/Tehran",
	"Asia/Thimphu",
	"Asia/Tomsk",
	"Asia/Ulaanbaatar",
	"Asia/Urumqi",
	"Asia/Ust-Nera",
	"Asia/Vientiane",
	"Asia/Vladivostok",
	"Asia/Yakutsk",
	"Asia/Yekaterinburg",
	"Asia/Yerevan",
	"Atlantic/Azores",
	"Atlantic/Bermuda",
	"Atlantic/Canary",
	"Atlantic/Cape_Verde",
	"Atlantic/Faroe",
	"Atlantic/Madeira",
	"Atlantic/Reykjavik",
	"Atlantic/St_Helena",
	"Atlantic/Stanley",
	"Australia/Adelaide",
	"Australia/Brisbane",
	"Australia/Broken_Hill",
	"Australia/Darwin",
	"Australia/Eucla",
	"Australia/Hobart",
	"Australia/Lindeman",
	"Australia/Lord_Howe",
	"Australia/Melbourne",
	"Australia/Perth",
	"Australia/Sydney",
	"Europe/Amsterdam",
	"Europe/Andorra",
	"Europe/Astrakhan",
	"Europe/Belgrade",
	"Europe/Berlin",
	"Europe/Bratislava",
	"Europe/Brussels",
	"Europe/Budapest",
	"Europe/Busingen",
	"Europe/Copenhagen",
	"Europe/Dublin",
	"Europe/Gibraltar",
	"Europe/Guernsey",
	"Europe/Isle_of_Man",
	"Europe/Istanbul",
	"Europe/Jersey",
	"Europe/Kirov",
	"Europe/Lisbon",
	"Europe/Ljubljana",
	"Europe/London",
	"Europe/Luxembourg",
	"Europe/Madrid",
	"Europe/Malta",
	"Europe/Minsk",
	"Europe/Monaco",
	"Europe/Moscow",
	"Europe/Oslo",
	"Europe/Paris",
	"Europe/Podgorica",
	"Europe/Prague",
	"Europe/Rome",
	"Europe/Samara",
	"Europe/San_Marino",
	"Europe/Sarajevo",
	"Europe/Simferopol",
	"Europe/Skopje",
	"Europe/Stockholm",
	"Europe/Tirane",
	"Europe/Ulyanovsk",
	"Europe/Vaduz",
	"Europe/Vatican",
	"Europe/Vienna",
	"Europe/Volgograd",
	"Europe/Warsaw",
	"Europe/Zagreb",
	"Europe/Zurich",
	"Indian/Antananarivo",
	"Indian/Chagos",
	"Indian/Christmas",
	"Indian/Cocos",
	"Indian/Comoro",
	"Indian/Kerguelen",
	"Indian/Mahe",
	"Indian/Maldives",
	"Indian/Mauritius",
	"Indian/Mayotte",
	"Indian/Reunion",
	"Pacific/Apia",
	"Pacific/Auckland",
	"Pacific/Bougainville",
	"Pacific/Chatham",
	"Pacific/Chuuk",
	"Pacific/Easter",
	"Pacific/Efate",
	"Pacific/Fakaofo",
	"Pacific/Fiji",
	"Pacific/Funafuti",
	"Pacific/Galapagos",
	"Pacific/Gambier",
	"Pacific/Guadalcanal",
	"Pacific/Guam",
	"Pacific/Honolulu",
	"Pacific/Kanton",
	"Pacific/Kiritimati",
	"Pacific/Kosrae",
	"Pacific/Kwajalein",
	"Pacific/Majuro",
	"Pacific/Marquesas",
	"Pacific/Midway",
	"Pacific/Nauru",
	"Pacific/Niue",
	"Pacific/Norfolk",
	"Pacific/Noumea",
	"Pacific/Pago_Pago",
	"Pacific/Palau",
	"Pacific/Pitcairn",
	"Pacific/Pohnpei",
	"Pacific/Port_Moresby",
	"Pacific/Rarotonga",
	"Pacific/Saipan",
	"Pacific/Tahiti",
	"Pacific/Tarawa",
	"Pacific/Tongatapu",
	"Pacific/Wake",
	"Pacific/Wallis",
].map((a) => stringToHex(a));
const abbrs = [
	"GMT",
	"GMT",
	"EAT",
	"CET",
	"EAT",
	"GMT",
	"WAT",
	"GMT",
	"GMT",
	"CAT",
	"WAT",
	"CAT",
	"WEST",
	"CET",
	"GMT",
	"GMT",
	"EAT",
	"EAT",
	"WAT",
	"WEST",
	"GMT",
	"CAT",
	"CAT",
	"SAST",
	"CAT",
	"EAT",
	"CAT",
	"CAT",
	"WAT",
	"WAT",
	"WAT",
	"GMT",
	"WAT",
	"CAT",
	"CAT",
	"WAT",
	"CAT",
	"SAST",
	"SAST",
	"EAT",
	"GMT",
	"EAT",
	"WAT",
	"WAT",
	"GMT",
	"GMT",
	"WAT",
	"GMT",
	"CET",
	"CAT",
	"HST",
	"AKST",
	"AST",
	"AST",
	"BRT",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"ART",
	"AST",
	"PYST",
	"EST",
	"BRT",
	"CST",
	"AST",
	"BRT",
	"CST",
	"AST",
	"AMT",
	"COT",
	"AMT",
	"EST",
	"VET",
	"GFT",
	"EST",
	"CST",
	"CST",
	"CST",
	"BRT",
	"AST",
	"GMT",
	"EST",
	"AST",
	"ACT",
	"CST",
	"BRT",
	"AST",
	"AST",
	"EST",
	"AST",
	"AST",
	"CST",
	"ECT",
	"GYT",
	"AST",
	"CST",
	"EST",
	"CST",
	"EST",
	"EST",
	"CST",
	"EST",
	"EST",
	"EST",
	"EST",
	"EST",
	"AKST",
	"EST",
	"EST",
	"AST",
	"BOT",
	"PET",
	"PST",
	"AST",
	"BRT",
	"CST",
	"AMT",
	"AST",
	"AST",
	"CST",
	"CST",
	"CST",
	"AKST",
	"CST",
	"PMDT",
	"AST",
	"CST",
	"UYT",
	"AST",
	"EST",
	"EST",
	"AKST",
	"FNT",
	"CST",
	"CST",
	"CST",
	"WGT",
	"CST",
	"EST",
	"SRT",
	"AST",
	"EST",
	"AMT",
	"AST",
	"CLT",
	"CST",
	"BRT",
	"CST",
	"CST",
	"ACT",
	"BRT",
	"CLST",
	"AST",
	"BRT",
	"CGT",
	"AKST",
	"AST",
	"NST",
	"AST",
	"AST",
	"AST",
	"AST",
	"CST",
	"CST",
	"AST",
	"PST",
	"EST",
	"AST",
	"PST",
	"CST",
	"AKST",
	"CAST",
	"DAVT",
	"DDUT",
	"AEDT",
	"MAWT",
	"NZDT",
	"CLST",
	"ART",
	"SYOT",
	"GMT",
	"VOST",
	"CET",
	"AST",
	"ALMT",
	"ANAT",
	"AQTT",
	"AQTT",
	"AQTT",
	"AST",
	"AST",
	"AZT",
	"ICT",
	"MSK+4",
	"KGT",
	"BNT",
	"YAKT",
	"CHOT",
	"IST",
	"BST",
	"TLT",
	"TJT",
	"IDT",
	"HKT",
	"HOVT",
	"IRKT",
	"WIB",
	"WIT",
	"IST",
	"AFT",
	"PETT",
	"PKT",
	"NPT",
	"YAKT",
	"IST",
	"KRAT",
	"MYT",
	"MYT",
	"AST",
	"CST",
	"MAGT",
	"WITA",
	"PST",
	"KRAT",
	"NOVT",
	"OMST",
	"ORAT",
	"ICT",
	"WIB",
	"KST",
	"AST",
	"QYZT",
	"MSK+2",
	"AST",
	"SAKT",
	"UZT",
	"KST",
	"CST",
	"SGT",
	"SRET",
	"CST",
	"UZT",
	"GET",
	"IRDT",
	"BTT",
	"MSD+3",
	"ULAT",
	"URUT",
	"VLAT",
	"ICT",
	"VLAT",
	"YAKT",
	"YEKT",
	"AMT",
	"AZOT",
	"AST",
	"WET",
	"CVT",
	"WET",
	"WET",
	"GMT",
	"GMT",
	"FKT",
	"ACDT",
	"AEST",
	"ACDT",
	"ACST",
	"ACWST",
	"AEDT",
	"AEST",
	"LHDT",
	"AEDT",
	"AWST",
	"AEDT",
	"CET",
	"CET",
	"MSK+1",
	"CET",
	"CET",
	"CET",
	"CET",
	"CET",
	"CET",
	"CET",
	"GMT",
	"CET",
	"GMT",
	"GMT",
	"TRT",
	"GMT",
	"MSK",
	"WET",
	"CET",
	"GMT",
	"CET",
	"CET",
	"CET",
	"MSK",
	"CET",
	"MSK",
	"CET",
	"CET",
	"CET",
	"CET",
	"CET",
	"SAMT",
	"CET",
	"CET",
	"MSK",
	"CET",
	"CET",
	"CET",
	"MSK+1",
	"CET",
	"CET",
	"CET",
	"MSK",
	"CET",
	"CET",
	"CET",
	"EAT",
	"IOT",
	"CXT",
	"CCT",
	"EAT",
	"TFT",
	"SCT",
	"MVT",
	"MUT",
	"EAT",
	"RET",
	"WST",
	"NZDT",
	"BST",
	"CHADT",
	"CHUT",
	"EASST",
	"VUT",
	"TKT",
	"FJT",
	"TVT",
	"GALT",
	"GAMT",
	"SBT",
	"ChST",
	"HST",
	"EST",
	"LINT",
	"KOST",
	"+12",
	"+12",
	"MART",
	"SST",
	"NRT",
	"NUT",
	"NFDT",
	"NCT",
	"SST",
	"+09",
	"PST",
	"PONT",
	"PGT",
	"CKT",
	"ChST",
	"TAHT",
	"GILT",
	"TOT",
	"WAKT",
	"WFT",
].map((a) => stringToHex(a));
const offsets = [
	0, 0, 10800, 3600, 10800, 0, 3600, 0, 0, 7200, 3600, 7200, 3600, 3600, 0, 0,
	10800, 10800, 3600, 3600, 0, 7200, 7200, 7200, 7200, 10800, 7200, 7200, 3600,
	3600, 3600, 0, 3600, 7200, 7200, 3600, 7200, 7200, 7200, 10800, 0, 10800,
	3600, 3600, 0, 0, 3600, 0, 3600, 7200, -36000, -32400, -14400, -14400, -10800,
	-10800, -10800, -10800, -10800, -10800, -10800, -10800, -10800, -10800,
	-10800, -10800, -10800, -14400, -10800, -18000, -10800, -21600, -14400,
	-10800, -21600, -14400, -14400, -18000, -14400, -18000, -14400, -10800,
	-18000, -21600, -21600, -21600, -14400, -14400, 0, -18000, -14400, -18000,
	-21600, -10800, -14400, -14400, -18000, -14400, -14400, -21600, -18000,
	-14400, -14400, -18000, -18000, -21600, -18000, -18000, -21600, -18000,
	-18000, -18000, -18000, -18000, -32400, -18000, -18000, -14400, -14400,
	-18000, -28800, -14400, -10800, -21600, -14400, -14400, -14400, -21600,
	-21600, -21600, -32400, -21600, -10800, -14400, -21600, -10800, -14400,
	-18000, -18000, -32400, -7200, -21600, -21600, -21600, -7200, -21600, -18000,
	-10800, -14400, -18000, -14400, -14400, -10800, -21600, -10800, -21600,
	-21600, -18000, -10800, -10800, -14400, -10800, -7200, -32400, -14400, -12600,
	-14400, -14400, -14400, -14400, -21600, -21600, -14400, -28800, -18000,
	-14400, -28800, -21600, -32400, 28800, 25200, 36000, 39600, 18000, 46800,
	-10800, -10800, 10800, 0, 18000, 3600, 10800, 18000, 43200, 18000, 18000,
	18000, 10800, 10800, 14400, 25200, 25200, 21600, 28800, 32400, 28800, 19800,
	21600, 32400, 18000, 25200, 28800, 25200, 28800, 25200, 32400, 7200, 16200,
	43200, 18000, 20700, 32400, 19800, 25200, 28800, 28800, 10800, 28800, 39600,
	28800, 28800, 25200, 25200, 21600, 18000, 25200, 25200, 32400, 10800, 18000,
	18000, 10800, 39600, 18000, 32400, 28800, 28800, 39600, 28800, 18000, 14400,
	12600, 21600, 25200, 28800, 21600, 36000, 25200, 36000, 32400, 18000, 14400,
	-3600, -14400, 0, -3600, 0, 0, 0, 0, -10800, 37800, 36000, 37800, 34200,
	31500, 39600, 36000, 39600, 39600, 28800, 39600, 3600, 3600, 14400, 3600,
	3600, 3600, 3600, 3600, 3600, 3600, 0, 3600, 0, 0, 10800, 0, 10800, 0, 3600,
	0, 3600, 3600, 3600, 10800, 3600, 10800, 3600, 3600, 3600, 3600, 3600, 14400,
	3600, 3600, 10800, 3600, 3600, 3600, 14400, 3600, 3600, 3600, 10800, 3600,
	3600, 3600, 10800, 21600, 25200, 23400, 10800, 18000, 14400, 18000, 14400,
	10800, 14400, 46800, 46800, 39600, 49500, 36000, -18000, 39600, 46800, 43200,
	43200, -21600, -32400, 39600, 36000, -36000, 46800, 50400, 39600, 43200,
	43200, -34200, -39600, 43200, -39600, 43200, 39600, -39600, 32400, -28800,
	39600, 36000, -36000, 36000, -36000, 43200, 46800, 43200, 43200,
].map((a) => BigInt(a));

function logDeploy(
	name: string,
	contract: DeployContractResult<ContractInstance>,
) {
	console.log(`Deployed ${name} at ${contract.contractInstance.address}`);
}
const deployFaucet: DeployFunction<Settings> = async (
	deployer: Deployer,
): Promise<void> => {
	const zoneSpliceOne = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 0n,
				fields: zones.splice(0, 126),
			},
		},
		"zones_0",
	);
	logDeploy("TimeZoneSpliceByteVec:zones_0", zoneSpliceOne);

	const zoneSpliceTwo = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 126n,
				fields: zones.splice(0, 126),
			},
		},
		"zones_1",
	);
	logDeploy("TimeZoneSpliceByteVec:zones_1", zoneSpliceTwo);
	const zoneSpliceThree = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 252n,
				fields: zones.splice(0, 126).concat(stringToHex("")),
			},
		},
		"zones_2",
	);

	logDeploy("TimeZoneSpliceByteVec:zones_2", zoneSpliceThree);
	const zoneCoordinator = await deployer.deployContract(
		TimeZoneCoordinatorByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				controller: ZERO_ADDRESS,
				spliceOne: zoneSpliceOne.contractInstance.contractId,
				spliceTwo: zoneSpliceTwo.contractInstance.contractId,
				spliceThree: zoneSpliceThree.contractInstance.contractId,
				minted: 0n,
			},
		},
		"zones_coordinator",
	);

	logDeploy("TimeZoneCoordinatorByteVec:zones_coordinator", zoneCoordinator);
	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: zoneSpliceOne.contractInstance.contractId,
			address: zoneCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: zoneSpliceTwo.contractInstance.contractId,
			address: zoneCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: zoneSpliceThree.contractInstance.contractId,
			address: zoneCoordinator.contractInstance.address,
		},
	});

	/** Abbreviations */
	const abbrSpliceOne = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 0n,
				fields: abbrs.splice(0, 126),
			},
		},
		"abbr_0",
	);
	logDeploy("TimeZoneSpliceByteVec:abbr_0", abbrSpliceOne);
	const abbrSpliceTwo = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 126n,
				fields: abbrs.splice(0, 126),
			},
		},
		"abbr_1",
	);
	logDeploy("TimeZoneSpliceByteVec:abbr_1", abbrSpliceTwo);
	const abbrSpliceThree = await deployer.deployContract(
		TimeZoneSpliceByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 252n,
				fields: abbrs.splice(0, 126).concat(stringToHex("")),
			},
		},
		"abbr_2",
	);

	logDeploy("TimeZoneSpliceByteVec:abbr_2", abbrSpliceThree);
	const abbrCoordinator = await deployer.deployContract(
		TimeZoneCoordinatorByteVec,
		{
			initialFields: {
				owner: deployer.account.address,
				controller: ZERO_ADDRESS,
				spliceOne: abbrSpliceOne.contractInstance.contractId,
				spliceTwo: abbrSpliceTwo.contractInstance.contractId,
				spliceThree: abbrSpliceThree.contractInstance.contractId,
				minted: 0n,
			},
		},
		"abbr_coordinator",
	);

	logDeploy("TimeZoneCoordinatorByteVec:abbr_coordinator", abbrCoordinator);
	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: abbrSpliceOne.contractInstance.contractId,
			address: abbrCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: abbrSpliceTwo.contractInstance.contractId,
			address: abbrCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorByteVec, {
		initialFields: {
			splice: abbrSpliceThree.contractInstance.contractId,
			address: abbrCoordinator.contractInstance.address,
		},
	});

	/** Offsets */
	const offsetSpliceOne = await deployer.deployContract(
		TimeZoneSpliceU256,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 0n,
				fields: offsets.splice(0, 76),
			},
		},
		"offset_0",
	);
	logDeploy("TimeZoneSpliceU256:offset_0", offsetSpliceOne);
	const offsetSpliceTwo = await deployer.deployContract(
		TimeZoneSpliceU256,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 76n,
				fields: offsets.splice(0, 76),
			},
		},
		"offset_1",
	);
	logDeploy("TimeZoneSpliceU256:offset_1", offsetSpliceTwo);
	const offsetSpliceThree = await deployer.deployContract(
		TimeZoneSpliceU256,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 76n * 2n,
				fields: offsets.splice(0, 76),
			},
		},
		"offset_2",
	);
	logDeploy("TimeZoneSpliceU256:offset_2", offsetSpliceThree);
	const offsetSpliceFour = await deployer.deployContract(
		TimeZoneSpliceU256,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 76n * 3n,
				fields: offsets.splice(0, 76),
			},
		},
		"offset_3",
	);
	logDeploy("TimeZoneSpliceU256:offset_3", offsetSpliceFour);
	const offsetSpliceFive = await deployer.deployContract(
		TimeZoneSpliceU256,
		{
			initialFields: {
				owner: deployer.account.address,
				coordinator: ZERO_ADDRESS,
				start: 76n * 4n,
				fields: offsets.splice(0, 76).concat(0n, 0n, 0n),
			},
		},
		"offset_4",
	);

	logDeploy("TimeZoneSpliceU256:offset_4", offsetSpliceFive);
	const offsetCoordinator = await deployer.deployContract(
		TimeZoneCoordinatorU256,
		{
			initialFields: {
				owner: deployer.account.address,
				controller: ZERO_ADDRESS,
				spliceOne: offsetSpliceOne.contractInstance.contractId,
				spliceTwo: offsetSpliceTwo.contractInstance.contractId,
				spliceThree: offsetSpliceThree.contractInstance.contractId,
				spliceFour: offsetSpliceFour.contractInstance.contractId,
				spliceFive: offsetSpliceFive.contractInstance.contractId,
				minted: 0n,
			},
		},
		"offset_coordinator",
	);

	logDeploy("TimeZoneCoordinatorU256:offset_coordinator", offsetCoordinator);
	await deployer.runScript(SetCoordinatorU256, {
		initialFields: {
			splice: offsetSpliceOne.contractInstance.contractId,
			address: offsetCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorU256, {
		initialFields: {
			splice: offsetSpliceTwo.contractInstance.contractId,
			address: offsetCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorU256, {
		initialFields: {
			splice: offsetSpliceThree.contractInstance.contractId,
			address: offsetCoordinator.contractInstance.address,
		},
	});

	await deployer.runScript(SetCoordinatorU256, {
		initialFields: {
			splice: offsetSpliceFour.contractInstance.contractId,
			address: offsetCoordinator.contractInstance.address,
		},
	});
	await deployer.runScript(SetCoordinatorU256, {
		initialFields: {
			splice: offsetSpliceFive.contractInstance.contractId,
			address: offsetCoordinator.contractInstance.address,
		},
	});

	const tz = await deployer.deployContract(TimeZoneController, {
		initialFields: {
			owner: deployer.account.address,
			collection: ZERO_ADDRESS, // TODO:
			minted: 0n,
			offsetCoordinator: offsetCoordinator.contractInstance.contractId,
			abbrCoordinator: abbrCoordinator.contractInstance.contractId,
			zoneCoordinator: zoneCoordinator.contractInstance.contractId,
		},
	});

	logDeploy("TimeZoneController", tz);
	await deployer.runScript(SetControllerByteVec, {
		initialFields: {
			splice: abbrCoordinator.contractInstance.contractId,
			address: tz.contractInstance.address,
		},
	});
	await deployer.runScript(SetControllerByteVec, {
		initialFields: {
			splice: zoneCoordinator.contractInstance.contractId,
			address: tz.contractInstance.address,
		},
	});
	await deployer.runScript(SetControllerU256, {
		initialFields: {
			splice: offsetCoordinator.contractInstance.contractId,
			address: tz.contractInstance.address,
		},
	});

	const nftTemplateResult = await deployer.deployContract(NFT, {
		initialFields: {
			collectionId: stringToHex(""),
			nftIndex: 0n,
			zone: stringToHex(""),
			offset: 0n,
			abbr: stringToHex(""),
		},
	});
	logDeploy("NFT", nftTemplateResult);

	const nftCollectionResult = await deployer.deployContract(NFTCollection, {
		initialFields: {
			nftTemplateId: nftTemplateResult.contractInstance.contractId,
			owner: deployer.account.address,
			totalSupply: 0n,
			timeZoneController: tz.contractInstance.contractId,
			price: 5n * 10n ** 18n,
		},
	});
	logDeploy("NFTCollection", nftCollectionResult);

	await deployer.runScript(SetCollection, {
		initialFields: {
			controller: tz.contractInstance.contractId,
			address: nftCollectionResult.contractInstance.address,
		},
	});
};

export default deployFaucet;
