/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as TimeZoneSpliceByteVecContractJson } from "../TimeZoneSpliceByteVec.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TimeZoneSpliceByteVecTypes {
  export type Fields = {
    start: bigint;
    fields: [
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString,
      HexString
    ];
    owner: Address;
    coordinator: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getStart: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getItem: {
      params: CallContractParams<{ item: bigint }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TimeZoneSpliceByteVecInstance,
  TimeZoneSpliceByteVecTypes.Fields
> {
  encodeFields(fields: TimeZoneSpliceByteVecTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as TimeZoneSpliceByteVecTypes.Fields;
  }

  consts = { ErrorCode: { WrongCaller: BigInt(0) } };

  at(address: string): TimeZoneSpliceByteVecInstance {
    return new TimeZoneSpliceByteVecInstance(address);
  }

  tests = {
    getStart: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneSpliceByteVecTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getStart", params);
    },
    getItem: async (
      params: TestContractParamsWithoutMaps<
        TimeZoneSpliceByteVecTypes.Fields,
        { item: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getItem", params);
    },
    setItem: async (
      params: TestContractParamsWithoutMaps<
        TimeZoneSpliceByteVecTypes.Fields,
        { item: bigint; value: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setItem", params);
    },
    setCoordinator: async (
      params: TestContractParamsWithoutMaps<
        TimeZoneSpliceByteVecTypes.Fields,
        { newCoordinator: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setCoordinator", params);
    },
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneSpliceByteVecTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TimeZoneSpliceByteVec = new Factory(
  Contract.fromJson(
    TimeZoneSpliceByteVecContractJson,
    "",
    "1e8dd9368f3365aa3816ec091f895b15ee0766c27a3b3b39c06ffbc10d64060e",
    []
  )
);

// Use this class to interact with the blockchain
export class TimeZoneSpliceByteVecInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TimeZoneSpliceByteVecTypes.State> {
    return fetchContractState(TimeZoneSpliceByteVec, this);
  }

  methods = {
    getStart: async (
      params?: TimeZoneSpliceByteVecTypes.CallMethodParams<"getStart">
    ): Promise<TimeZoneSpliceByteVecTypes.CallMethodResult<"getStart">> => {
      return callMethod(
        TimeZoneSpliceByteVec,
        this,
        "getStart",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getItem: async (
      params: TimeZoneSpliceByteVecTypes.CallMethodParams<"getItem">
    ): Promise<TimeZoneSpliceByteVecTypes.CallMethodResult<"getItem">> => {
      return callMethod(
        TimeZoneSpliceByteVec,
        this,
        "getItem",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends TimeZoneSpliceByteVecTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TimeZoneSpliceByteVecTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TimeZoneSpliceByteVec,
      this,
      calls,
      getContractByCodeHash
    )) as TimeZoneSpliceByteVecTypes.MultiCallResults<Calls>;
  }
}
