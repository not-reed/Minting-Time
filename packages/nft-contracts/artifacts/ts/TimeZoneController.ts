/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as TimeZoneControllerContractJson } from "../TimeZoneController.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TimeZoneControllerTypes {
  export type Fields = {
    owner: Address;
    collection: Address;
    minted: bigint;
    offsetCoordinator: HexString;
    abbrCoordinator: HexString;
    zoneCoordinator: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getStuff: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, HexString, HexString]>;
    };
    getItem: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint, HexString]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TimeZoneControllerInstance,
  TimeZoneControllerTypes.Fields
> {
  encodeFields(fields: TimeZoneControllerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as TimeZoneControllerTypes.Fields;
  }

  consts = {
    MAX_SUPPLY: BigInt(377),
    ErrorCode: { OutOfStock: BigInt(69), UnAuthorized: BigInt(420) },
  };

  at(address: string): TimeZoneControllerInstance {
    return new TimeZoneControllerInstance(address);
  }

  tests = {
    getStuff: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneControllerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<
      TestContractResultWithoutMaps<[HexString, HexString, HexString]>
    > => {
      return testMethod(this, "getStuff", params);
    },
    setCollection: async (
      params: TestContractParamsWithoutMaps<
        TimeZoneControllerTypes.Fields,
        { collection_: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setCollection", params);
    },
    getItem: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneControllerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<
      TestContractResultWithoutMaps<[HexString, bigint, HexString]>
    > => {
      return testMethod(this, "getItem", params);
    },
    getRandom: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneControllerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getRandom", params);
    },
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<TimeZoneControllerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TimeZoneController = new Factory(
  Contract.fromJson(
    TimeZoneControllerContractJson,
    "",
    "32b94ad1f49bdc5b76ffa6abb79b86e4b29386b0b582897aa6eefdc4258f7d96",
    []
  )
);

// Use this class to interact with the blockchain
export class TimeZoneControllerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TimeZoneControllerTypes.State> {
    return fetchContractState(TimeZoneController, this);
  }

  methods = {
    getStuff: async (
      params?: TimeZoneControllerTypes.CallMethodParams<"getStuff">
    ): Promise<TimeZoneControllerTypes.CallMethodResult<"getStuff">> => {
      return callMethod(
        TimeZoneController,
        this,
        "getStuff",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getItem: async (
      params?: TimeZoneControllerTypes.CallMethodParams<"getItem">
    ): Promise<TimeZoneControllerTypes.CallMethodResult<"getItem">> => {
      return callMethod(
        TimeZoneController,
        this,
        "getItem",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends TimeZoneControllerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TimeZoneControllerTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TimeZoneController,
      this,
      calls,
      getContractByCodeHash
    )) as TimeZoneControllerTypes.MultiCallResults<Calls>;
  }
}
