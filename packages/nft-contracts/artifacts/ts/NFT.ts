/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as NFTContractJson } from "../NFT.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace NFTTypes {
  export type Fields = {
    collectionId: HexString;
    nftIndex: bigint;
    zone: HexString;
    offset: bigint;
    abbr: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getImage: {
      params: CallContractParams<{
        hours: bigint;
        minutes: bigint;
        seconds: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getAttributes: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNFTIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    encode: {
      params: CallContractParams<{ input: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<NFTInstance, NFTTypes.Fields> {
  encodeFields(fields: NFTTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as NFTTypes.Fields;
  }

  consts = {
    TABLE:
      "4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f",
    QUOTE: "22",
    COMMA: "2c",
    COLON: "3a",
    OPEN_BRACE: "7b",
    CLOSE_BRACE: "7d",
    MIME_JSON: "646174613a6170706c69636174696f6e2f6a736f6e3b757466382c",
    MIME_SVG: "646174613a696d6167652f7376672b786d6c3b6261736536342c",
  };

  at(address: string): NFTInstance {
    return new NFTInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(this, "getCollectionIndex", params);
    },
    getImage: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { hours: bigint; minutes: bigint; seconds: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getImage", params);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getOffset: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getOffset", params);
    },
    getAttributes: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getAttributes", params);
    },
    getNFTIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getNFTIndex", params);
    },
    createTraits: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "createTraits", params);
    },
    createTrait: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { type: HexString; value: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "createTrait", params);
    },
    quote: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { value: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "quote", params);
    },
    jsonPair: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { key: HexString; value: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "jsonPair", params);
    },
    json: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { inner: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "json", params);
    },
    encode: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { input: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "encode", params);
    },
    internalEncode: async (
      params: TestContractParamsWithoutMaps<NFTTypes.Fields, { src: HexString }>
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "internalEncode", params);
    },
    getChunk: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { src: HexString; size: bigint; location: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getChunk", params);
    },
    addPadding: async (
      params: TestContractParamsWithoutMaps<
        NFTTypes.Fields,
        { inputSize: bigint; result: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "addPadding", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NFT = new Factory(
  Contract.fromJson(
    NFTContractJson,
    "",
    "a1ef156ed1dbbb3606b09bc8611e0ccf53169c69808874ccadb81de894704ea5",
    []
  )
);

// Use this class to interact with the blockchain
export class NFTInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTTypes.State> {
    return fetchContractState(NFT, this);
  }

  methods = {
    getTokenUri: async (
      params?: NFTTypes.CallMethodParams<"getTokenUri">
    ): Promise<NFTTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        NFT,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: NFTTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<NFTTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        NFT,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getImage: async (
      params: NFTTypes.CallMethodParams<"getImage">
    ): Promise<NFTTypes.CallMethodResult<"getImage">> => {
      return callMethod(NFT, this, "getImage", params, getContractByCodeHash);
    },
    getName: async (
      params?: NFTTypes.CallMethodParams<"getName">
    ): Promise<NFTTypes.CallMethodResult<"getName">> => {
      return callMethod(
        NFT,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAttributes: async (
      params?: NFTTypes.CallMethodParams<"getAttributes">
    ): Promise<NFTTypes.CallMethodResult<"getAttributes">> => {
      return callMethod(
        NFT,
        this,
        "getAttributes",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params?: NFTTypes.CallMethodParams<"getNFTIndex">
    ): Promise<NFTTypes.CallMethodResult<"getNFTIndex">> => {
      return callMethod(
        NFT,
        this,
        "getNFTIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    encode: async (
      params: NFTTypes.CallMethodParams<"encode">
    ): Promise<NFTTypes.CallMethodResult<"encode">> => {
      return callMethod(NFT, this, "encode", params, getContractByCodeHash);
    },
  };

  async multicall<Calls extends NFTTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFT,
      this,
      calls,
      getContractByCodeHash
    )) as NFTTypes.MultiCallResults<Calls>;
  }
}
