/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as NFTCollectionContractJson } from "../NFTCollection.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace NFTCollectionTypes {
  export type Fields = {
    nftTemplateId: HexString;
    timeZoneController: HexString;
    owner: Address;
    totalSupply: bigint;
    price: bigint;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{
    minter: Address;
    index: bigint;
    nft: HexString;
  }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
    setPrice: {
      params: CallContractParams<{ price_: bigint }>;
      result: CallContractResult<null>;
    };
    getPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    mint: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    royaltyAmount: {
      params: CallContractParams<{ tokenId: HexString; salePrice: bigint }>;
      result: CallContractResult<bigint>;
    };
    payRoyalty: {
      params: CallContractParams<{ payer_: Address; amount_: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawRoyalty: {
      params: CallContractParams<{ to_: Address; amount_: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawAlph: {
      params: CallContractParams<{ to_: Address; amount_: bigint }>;
      result: CallContractResult<null>;
    };
    destroyInfrastructure: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    burnToken: {
      params: CallContractParams<{ nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setPrice: {
      params: SignExecuteContractMethodParams<{ price_: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    royaltyAmount: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        salePrice: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    payRoyalty: {
      params: SignExecuteContractMethodParams<{
        payer_: Address;
        amount_: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawRoyalty: {
      params: SignExecuteContractMethodParams<{
        to_: Address;
        amount_: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawAlph: {
      params: SignExecuteContractMethodParams<{
        to_: Address;
        amount_: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroyInfrastructure: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    burnToken: {
      params: SignExecuteContractMethodParams<{ nftIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  NFTCollectionInstance,
  NFTCollectionTypes.Fields
> {
  encodeFields(fields: NFTCollectionTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as NFTCollectionTypes.Fields;
  }

  eventIndex = { Mint: 0 };
  consts = {
    RoyaltyRate: BigInt(500),
    ErrorCodes: {
      NFTNotFound: BigInt(0),
      CollectionOwnerAllowedOnly: BigInt(1),
      NFTNotPartOfCollection: BigInt(2),
      Unburnable: BigInt(3),
    },
  };

  at(address: string): NFTCollectionInstance {
    return new NFTCollectionInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { nftId: HexString; nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    setPrice: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { price_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setPrice", params, getContractByCodeHash);
    },
    getPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPrice", params, getContractByCodeHash);
    },
    mint: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    royaltyAmount: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { tokenId: HexString; salePrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "royaltyAmount", params, getContractByCodeHash);
    },
    payRoyalty: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { payer_: Address; amount_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "payRoyalty", params, getContractByCodeHash);
    },
    withdrawRoyalty: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { to_: Address; amount_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawRoyalty", params, getContractByCodeHash);
    },
    withdrawAlph: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { to_: Address; amount_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawAlph", params, getContractByCodeHash);
    },
    destroyInfrastructure: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTCollectionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "destroyInfrastructure",
        params,
        getContractByCodeHash
      );
    },
    burnToken: async (
      params: TestContractParamsWithoutMaps<
        NFTCollectionTypes.Fields,
        { nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "burnToken", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const NFTCollection = new Factory(
  Contract.fromJson(
    NFTCollectionContractJson,
    "",
    "c1bc7ea758b55cb1a8317e101e08482a5720f3d88cf0cf87a29861f30dc8564e",
    []
  )
);

// Use this class to interact with the blockchain
export class NFTCollectionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTCollectionTypes.State> {
    return fetchContractState(NFTCollection, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: EventSubscribeOptions<NFTCollectionTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTCollection.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  methods = {
    getCollectionUri: async (
      params?: NFTCollectionTypes.CallMethodParams<"getCollectionUri">
    ): Promise<NFTCollectionTypes.CallMethodResult<"getCollectionUri">> => {
      return callMethod(
        NFTCollection,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: NFTCollectionTypes.CallMethodParams<"totalSupply">
    ): Promise<NFTCollectionTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        NFTCollection,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: NFTCollectionTypes.CallMethodParams<"nftByIndex">
    ): Promise<NFTCollectionTypes.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        NFTCollection,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: NFTCollectionTypes.CallMethodParams<"validateNFT">
    ): Promise<NFTCollectionTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        NFTCollection,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    setPrice: async (
      params: NFTCollectionTypes.CallMethodParams<"setPrice">
    ): Promise<NFTCollectionTypes.CallMethodResult<"setPrice">> => {
      return callMethod(
        NFTCollection,
        this,
        "setPrice",
        params,
        getContractByCodeHash
      );
    },
    getPrice: async (
      params?: NFTCollectionTypes.CallMethodParams<"getPrice">
    ): Promise<NFTCollectionTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        NFTCollection,
        this,
        "getPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    mint: async (
      params?: NFTCollectionTypes.CallMethodParams<"mint">
    ): Promise<NFTCollectionTypes.CallMethodResult<"mint">> => {
      return callMethod(
        NFTCollection,
        this,
        "mint",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    royaltyAmount: async (
      params: NFTCollectionTypes.CallMethodParams<"royaltyAmount">
    ): Promise<NFTCollectionTypes.CallMethodResult<"royaltyAmount">> => {
      return callMethod(
        NFTCollection,
        this,
        "royaltyAmount",
        params,
        getContractByCodeHash
      );
    },
    payRoyalty: async (
      params: NFTCollectionTypes.CallMethodParams<"payRoyalty">
    ): Promise<NFTCollectionTypes.CallMethodResult<"payRoyalty">> => {
      return callMethod(
        NFTCollection,
        this,
        "payRoyalty",
        params,
        getContractByCodeHash
      );
    },
    withdrawRoyalty: async (
      params: NFTCollectionTypes.CallMethodParams<"withdrawRoyalty">
    ): Promise<NFTCollectionTypes.CallMethodResult<"withdrawRoyalty">> => {
      return callMethod(
        NFTCollection,
        this,
        "withdrawRoyalty",
        params,
        getContractByCodeHash
      );
    },
    withdrawAlph: async (
      params: NFTCollectionTypes.CallMethodParams<"withdrawAlph">
    ): Promise<NFTCollectionTypes.CallMethodResult<"withdrawAlph">> => {
      return callMethod(
        NFTCollection,
        this,
        "withdrawAlph",
        params,
        getContractByCodeHash
      );
    },
    destroyInfrastructure: async (
      params?: NFTCollectionTypes.CallMethodParams<"destroyInfrastructure">
    ): Promise<
      NFTCollectionTypes.CallMethodResult<"destroyInfrastructure">
    > => {
      return callMethod(
        NFTCollection,
        this,
        "destroyInfrastructure",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    burnToken: async (
      params: NFTCollectionTypes.CallMethodParams<"burnToken">
    ): Promise<NFTCollectionTypes.CallMethodResult<"burnToken">> => {
      return callMethod(
        NFTCollection,
        this,
        "burnToken",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getCollectionUri: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<
      NFTCollectionTypes.SignExecuteMethodResult<"getCollectionUri">
    > => {
      return signExecuteMethod(NFTCollection, this, "getCollectionUri", params);
    },
    totalSupply: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"totalSupply">> => {
      return signExecuteMethod(NFTCollection, this, "totalSupply", params);
    },
    nftByIndex: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"nftByIndex">> => {
      return signExecuteMethod(NFTCollection, this, "nftByIndex", params);
    },
    validateNFT: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"validateNFT">> => {
      return signExecuteMethod(NFTCollection, this, "validateNFT", params);
    },
    setPrice: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"setPrice">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"setPrice">> => {
      return signExecuteMethod(NFTCollection, this, "setPrice", params);
    },
    getPrice: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"getPrice">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"getPrice">> => {
      return signExecuteMethod(NFTCollection, this, "getPrice", params);
    },
    mint: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"mint">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(NFTCollection, this, "mint", params);
    },
    royaltyAmount: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"royaltyAmount">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"royaltyAmount">> => {
      return signExecuteMethod(NFTCollection, this, "royaltyAmount", params);
    },
    payRoyalty: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"payRoyalty">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"payRoyalty">> => {
      return signExecuteMethod(NFTCollection, this, "payRoyalty", params);
    },
    withdrawRoyalty: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"withdrawRoyalty">
    ): Promise<
      NFTCollectionTypes.SignExecuteMethodResult<"withdrawRoyalty">
    > => {
      return signExecuteMethod(NFTCollection, this, "withdrawRoyalty", params);
    },
    withdrawAlph: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"withdrawAlph">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"withdrawAlph">> => {
      return signExecuteMethod(NFTCollection, this, "withdrawAlph", params);
    },
    destroyInfrastructure: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"destroyInfrastructure">
    ): Promise<
      NFTCollectionTypes.SignExecuteMethodResult<"destroyInfrastructure">
    > => {
      return signExecuteMethod(
        NFTCollection,
        this,
        "destroyInfrastructure",
        params
      );
    },
    burnToken: async (
      params: NFTCollectionTypes.SignExecuteMethodParams<"burnToken">
    ): Promise<NFTCollectionTypes.SignExecuteMethodResult<"burnToken">> => {
      return signExecuteMethod(NFTCollection, this, "burnToken", params);
    },
  };

  async multicall<Calls extends NFTCollectionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTCollectionTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFTCollection,
      this,
      calls,
      getContractByCodeHash
    )) as NFTCollectionTypes.MultiCallResults<Calls>;
  }
}
