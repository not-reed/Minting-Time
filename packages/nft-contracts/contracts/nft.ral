import "std/nft_interface"

Contract NFT(collectionId: ByteVec, nftIndex: U256, zone: ByteVec, offset: I256, abbr: ByteVec) implements INFT {
  // Base64 Encoding Table
  const TABLE = b`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/`

  // JSON formatting
  const QUOTE = b`"`
  const COMMA = b`,`
  const COLON = b`:`
  const OPEN_BRACE = b`{`
  const CLOSE_BRACE = b`}`

  // Note: these are plain text, not base64. base64 is still TODO:
  const MIME_JSON = b`data:application/json;utf8,`
  const MIME_SVG = b`data:image/svg+xml;base64,`

  pub fn getTokenUri() -> ByteVec {
    let time = toU256!(toI256!(blockTimeStamp!()) + (offset * 1000i))

    let seconds = (time / 1000) % 60
    let minutes = (time / (1000 * 60)) % 60
    let hours = (time / (1000 * 3600)) % 24

    let pairs = jsonPair(b`name`, getName()) ++ COMMA ++ createTraits() ++ COMMA ++ jsonPair(b`image`, getImage(hours, minutes, seconds)) 
     
  //    ++ COMMA ++ createTraits()
    // let pairs = jsonPair(b`name`, getName()) ++ COMMA ++ jsonPair(b`description`, getDescription()) ++ COMMA ++ jsonPair(b`image`, getImage())
    return MIME_JSON ++ json(pairs)
  }

  pub fn getImage(hours: U256, minutes: U256, seconds: U256) -> ByteVec {
    return MIME_SVG ++ encode(b`<svg xmlns="http://www.w3.org/2000/svg" stroke="#000" style="transform: rotate(-90deg)" viewBox="0 0 40 40"><style>:root{--s:`
      ++ u256ToString!(seconds) ++ b`;--m:` ++ u256ToString!(minutes) ++ b`;--h:` ++ u256ToString!(hours) 
      ++ b`;}circle{fill:white;}.m{transform:translate(20px,20px);stroke-width:0.2;}.s,.mi,.h{transform:translate(20px, 20px) rotate(0deg);}.s{transform:translate(20px, 20px) rotate(calc(var(--s)*6deg));stroke-width:0.3;animation:rotateSecondHand 60s steps(60) infinite;stroke:#d00505;}.mi{transform:translate(20px, 20px) rotate(calc(var(--m)*6deg));stroke-width:0.6;animation:rotatemiHand 3600s steps(60) infinite;animation-delay:calc(var(--s)*-1*1s);}.h{transform:translate(20px, 20px) rotate(calc(var(--h)*30deg));animation:rotatehHand calc(12*60*60s) linear infinite;stroke-width:1;animation-delay:calc(calc(var(--m)*-60*1s) + calc(var(--s)*-1*1s));}.text{font-size:1px;font-family:sans-serif;transform:translate(14px, 19px) rotate(90deg);fill:#dfdfdf;stroke:none;}.pin{stroke:#d00505;stroke-width:0.2;}@keyframes rotateSecondHand{from{transform:translate(20px, 20px) rotate(calc(var(--s)*6deg));}to{transform:translate(20px, 20px) rotate(calc(var(--s)*6deg + 360deg));}}@keyframes rotatemiHand{from{transform:translate(20px, 20px) rotate(calc(var(--m)*6deg));}to{transform:translate(20px, 20px) rotate(calc(var(--m)*6deg + 360deg));}}@keyframes rotatehHand{from{transform:translate(20px, 20px) rotate(calc(var(--h)*30deg));}to{transform:translate(20px, 20px) rotate(calc(var(--h)*30deg + 360deg));}}.m>line:nth-child(1){transform:rotate(30deg);}.m>line:nth-child(2){transform:rotate(calc(2*30deg));}.m>line:nth-child(3){transform:rotate(calc(3*30deg));stroke-width:0.5;}.m>line:nth-child(4){transform:rotate(calc(4*30deg));}.m>line:nth-child(5){transform:rotate(calc(5*30deg));}.m>line:nth-child(6){transform:rotate(calc(6*30deg));stroke-width:0.5;}.m>line:nth-child(7){transform:rotate(calc(7*30deg));}.m>line:nth-child(8){transform:rotate(calc(8*30deg));}.m>line:nth-child(9){transform:rotate(calc(9*30deg));stroke-width:0.5;}.m>line:nth-child(10){transform:rotate(calc(10*30deg));}.m>line:nth-child(11){transform:rotate(calc(11*30deg));}.m>line:nth-child(12){transform:rotate(calc(12*30deg));stroke-width:0.5;}</style><circle cx="20" cy="20" r="19"/><g class="m"><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/><line x1="15" x2="16"/></g><line x2="9" class="h"/><line x2="13" class="mi"/><line x2="16" class="s"/><circle cx="20" cy="20" r=".7" class="pin"/></svg>`)
  }

  pub fn getName() -> ByteVec {
    return zone ++ b`%20-%20` ++ abbr ++ b`(` ++ getOffset() ++ b`)`
  }

  fn getOffset() -> ByteVec {

    let mut res = b`GMT`

    if (offset < 0i) {
      res = res ++ b`-`
    } else {
      res = res ++ b`+`
    }

    let offsetAbs = if (offset < 0i)  toU256!(offset * -1) else toU256!(offset)

    let time = offsetAbs / 3600

    return res ++ u256ToString!(time)
  }

  pub fn getAttributes() -> ByteVec {
    return b`[`
     ++ createTrait(b`zone`, zone) ++ COMMA
      ++ createTrait(b`offset`, getOffset()) ++ COMMA
      ++ createTrait(b`abbr`, abbr)
      ++ b`]`
  }

  pub fn getNFTIndex() -> U256 {
    return nftIndex
  }

  pub fn getCollectionIndex() -> (ByteVec, U256) {
    return collectionId, nftIndex
  }

  fn createTraits() -> ByteVec {
    return b`"attributes": [` 
      ++ createTrait(b`zone`, zone) ++ COMMA
      ++ createTrait(b`offset`, getOffset()) ++ COMMA
      ++ createTrait(b`abbr`, abbr)
      ++ b`]`
  }

  fn createTrait(type: ByteVec, value: ByteVec) -> ByteVec {
    return b`{"trait_type":"` ++ type ++ b`","value":"` ++ value ++ b`"}`
  }

  // JSON utils
  fn quote(value: ByteVec) -> ByteVec {
    return QUOTE ++ value ++ QUOTE
  }

  fn jsonPair(key: ByteVec, value: ByteVec) -> ByteVec {
    return quote(key) ++ COLON ++ quote(value)
  }

  fn json(inner: ByteVec) -> ByteVec {
    return OPEN_BRACE ++ inner ++ CLOSE_BRACE
  }

  pub fn encode(input: ByteVec) -> ByteVec {
    let result = internalEncode(input)
    return addPadding(size!(input), result)
  }

  // Base64 Utils
  fn internalEncode(src: ByteVec) -> ByteVec {
    let inputSize = size!(src)
    let mut handledSize = 0

    let mut result = b``

    while (inputSize > handledSize) {
        let size = inputSize - handledSize
        result = result ++ getChunk(src, size, handledSize)
        handledSize = handledSize + 3
    }

    return result
  }

  fn getChunk(src: ByteVec, size: U256, location: U256) -> ByteVec {
    let byte = u256From1Byte!(byteVecSlice!(src, location, location + 1)) << 16 
        | (if (size > 1) u256From1Byte!((if (size > 1) byteVecSlice!(src, location + 1, location + 2) else b``)) << 8 else 0) 
        | (if (size > 2) u256From1Byte!((if (size > 2) byteVecSlice!(src, location + 2, location + 3) else b``)) else 0)

    let byte61 = (byte & 16515072) >> 18
    let byte62 = (byte & 258048) >> 12
    let byte63 = (byte & 4032) >> 6
    let byte64 = byte & 63

    return byteVecSlice!(TABLE, byte61, byte61 + 1) 
        ++ byteVecSlice!(TABLE, byte62, byte62 + 1) 
        ++ (if (size > 1) byteVecSlice!(TABLE, byte63, byte63 + 1) else b``) 
        ++ (if (size > 2) byteVecSlice!(TABLE, byte64, byte64 + 1) else b``)
  }

  fn addPadding(inputSize: U256, result: ByteVec) -> ByteVec {
    let mut paddingStr = b``
    let padding = ((inputSize + 3 - 1) / 3) * 4
    let resultSize = size!(result)
    for (let mut i = resultSize; i < padding; i = i + 1) {
        paddingStr = paddingStr ++ b`=`
    }

    return result ++ paddingStr
  }
}
